Automatically generated by Mendeley Desktop 1.19.2
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@article{Lehman1979,
abstract = {The paper presents interpretations of some recently discovered laws of evolution and conservation in the largeprogram life cycle. Program development and maintenance processes are managed and implemented by people; thus in the long term they could be expected to be unpredictable, dependant on the judgments, whims, and actions of programming process participants (e.g., managers, programmers, and product users). Yet, observed, measured, and modeled regularities suggest laws that are closer to biological laws or those of modern physics than to those currently formulated in other areas subject to human influence (e.g., economics and sociology). After a brief discussion of the first four laws, to highlight underlying phenomena and natural attributes of the program evolution process, the paper concentrates on a fifth law and shows how, and why, this law represents a conservation phenomenon: the Conservation of Familiarity.},
author = {Lehman, M.M.},
doi = {10.1016/0164-1212(79)90022-0},
file = {:Users/jgh/Library/Application Support/Mendeley Desktop/Downloaded/Lehman - 1979 - On understanding laws, evolution, and conservation in the large-program life cycle(2).pdf:pdf},
issn = {0164-1212},
journal = {Journal of Systems and Software},
month = {jan},
pages = {213--221},
publisher = {Elsevier},
title = {{On understanding laws, evolution, and conservation in the large-program life cycle}},
url = {https://www.sciencedirect.com/science/article/pii/0164121279900220},
volume = {1},
year = {1979}
}
@inproceedings{Lehman1996,
author = {Lehman, M. M.},
booktitle = {European Workshop on Software Process Technology},
doi = {10.1007/BFb0017737},
file = {:Users/jgh/Library/Application Support/Mendeley Desktop/Downloaded/Lehman - 1996 - Laws of software evolution revisited(2).pdf:pdf},
pages = {108--124},
publisher = {Springer, Berlin, Heidelberg},
title = {{Laws of software evolution revisited}},
url = {http://link.springer.com/10.1007/BFb0017737},
year = {1996}
}
@article{Yoshida2016a,
abstract = {Refactoring is a critical technique in evolving software systems. Martin Fowler presented a catalogue of refactoring patterns that defines a list of code smells and their corresponding refactoring patterns. This list aimed at supporting programmers in finding suitable refactoring patterns that remove code smells from their systems. However, a recent empirical study by Bavota et al. shows that refactoring rarely removes code smells which do not align with Fowler's catalog. To bridge the gap between them, we revisit the relationship between code smells and refactorings. In this study, we investigate whether developers apply appropriate refactoring patterns to fix code smells in three open source software systems.},
author = {Yoshida, Norihiro and Saika, Tsubasa and Choi, Eunjong and Ouni, Ali and Inoue, Katsuro},
doi = {10.1109/ICPC.2016.7503738},
file = {:Users/jgh/Library/Application Support/Mendeley Desktop/Downloaded/Yoshida et al. - 2016 - Revisiting the relationship between code smells and refactoring.pdf:pdf},
isbn = {9781509014286},
journal = {IEEE International Conference on Program Comprehension},
pages = {1--4},
title = {{Revisiting the relationship between code smells and refactoring}},
volume = {2016-July},
year = {2016}
}
@article{Lehman1980,
abstract = {By classifying programs according to their relationship to the environment in which they are executed, the paper identifies the sources of evolutionary pressure on computer applications and programs and shows why this results in a process of never ending maintenance activity. The resultant life cycle processes are then briefly discussed. The paper then introduces laws of Program Evolution that have been formulated following quantitative studies of the evolution of a number of different systems. Finally an example is provided of the application of Evolution Dynamics models to program release planning.},
author = {Lehman, Meir M.},
doi = {10.1109/PROC.1980.11805},
file = {:Users/jgh/Library/Application Support/Mendeley Desktop/Downloaded/Lehman - 1980 - Programs, Life Cycles, and Laws of Software Evolution.pdf:pdf},
isbn = {0018-9219 VO - 68},
issn = {15582256},
journal = {Proceedings of the IEEE},
number = {9},
pages = {1060--1076},
title = {{Programs, Life Cycles, and Laws of Software Evolution}},
url = {http://ieeexplore.ieee.org/document/1456074/},
volume = {68},
year = {1980}
}
@book{Suryanarayana2014,
abstract = {Awareness of design smells - indicators of common design problems - helps developers or software engineers understand mistakes made while designing, what design principles were overlooked or misapplied, and what principles need to be applied properly to address those smells through refactoring. Developers and software engineers may "know" principles and patterns, but are not aware of the "smells" that exist in their design because of wrong or mis-application of principles or patterns. These smells tend to contribute heavily to technical debt - further time owed to fix projects thought to be complete - and need to be addressed via proper refactoring.Refactoring for Software Design Smells presents 25 structural design smells, their role in identifying design issues, and potential refactoring solutions. Organized across common areas of software design, each smell is presented with diagrams and examples illustrating the poor design practices and the problems that result, creating a catalog of nuggets of readily usable information that developers or engineers can apply in their projects. The authors distill their research and experience as consultants and trainers, providing insights that have been used to improve refactoring and reduce the time and costs of managing software projects. Along the way they recount anecdotes from actual projects on which the relevant smell helped address a design issue.Contains a comprehensive catalog of 25 structural design smells (organized around four fundamental design principles) that contribute to technical debt in software projectsPresents a unique naming scheme for smells that helps understand the cause of a smell as well as points toward its potential refactoringIncludes illustrative examples that showcase the poor design practices underlying a smell and the problems that resultCovers pragmatic techniques for refactoring design smells to manage technical debt and to create and maintain high-quality software in practicePresents insightful anecdotes and case studies drawn from the trenches of real-world projects},
author = {Suryanarayana, Girish and Samarthyam, Ganesh and Sharma, Tushar},
file = {:Users/jgh/Library/Application Support/Mendeley Desktop/Downloaded/Suryanarayana, Samarthyam, Sharma - 2014 - Refactoring for Software Design Smells Managing Technical Debt(2).pdf:pdf},
isbn = {0128016469},
pages = {258},
publisher = {Elsevier Science},
title = {{Refactoring for Software Design Smells: Managing Technical Debt}},
url = {https://books.google.com/books?id=1SaOAwAAQBAJ{\&}pgis=1},
volume = {11},
year = {2014}
}
@inproceedings{Tufano2015,
abstract = {In past and recent years, the issues related to managing technical debt received significant attention by researchers from both industry and academia. There are several factors that contribute to technical debt. One of these is represented by code bad smells, i.e., Symptoms of poor design and implementation choices. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced. To fill this gap, we conducted a large empirical study over the change history of 200 open source projects from different software ecosystems and investigated when bad smells are introduced by developers, and the circumstances and reasons behind their introduction. Our study required the development of a strategy to identify smell-introducing commits, the mining of over 0.5M commits, and the manual analysis of 9,164 of them (i.e., Those identified as smell-introducing). Our findings mostly contradict common wisdom stating that smells are being introduced during evolutionary tasks. In the light of our results, we also call for the need to develop a new generation of recommendation systems aimed at properly planning smell refactoring activities.},
address = {Florence, Italy},
author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Olivetox, Rocco and {Di Penta}, Massimiliano and {De Lucia}, Andrea and Poshyvanyk, Denys},
booktitle = {International Conference on Software Engineering ICSE},
doi = {10.1109/ICSE.2015.59},
file = {:Users/jgh/Library/Application Support/Mendeley Desktop/Downloaded/Tufano et al. - 2015 - When and why your code starts to smell bad(2).pdf:pdf},
isbn = {9781479919345},
issn = {02705257},
pages = {403--414},
pmid = {7194592},
title = {{When and why your code starts to smell bad}},
volume = {1},
year = {2015}
}
